#!/usr/bin/ruby
# Author: Sukriti Bhattacharya

# construct and write the n-gram hash tables for the training set

require 'fileutils'

class Ngrams

     def initialize()
        @ngram = Hash.new(0)            # n-gram hash table
     end

     def ngram                          # accessor method
        @ngram
     end



def process_input(inputF) #process input

   system("hexdump -ve '1/1 \"%02x \"' #{inputF} > hexdump.txt")
   inputfile = File.open("hexdump.txt", "rb")
   
	# *** process a hex dump test file ***

   line = inputfile.read
   line = line.split(' ')
   
  
   line = line.unshift("$ $ $")
   line = line.push("#")
   inputfile.close()
   return line
end



 def calculate_ngrams(line, n)
  

    # construct n-gram hash table for a give sentence "line"

                line = line.downcase.scan(/[a-zA-Z0-9#$]+/)
                 p line
                 n = (n.to_i - 1).to_i
                 num = line.length - n

            num.times {|i|
                key = line[i]
                        n.times{|j|
                        key = key+' '+ line[i+j+1]                               
                        }
                        @ngram[key] += 1
        }


 end

end

# *** Main() ****

startT = Time.new
ng = Ngrams.new
#k = Ngrams.new
i=0

        Dir.foreach("#{ARGV[0]}") do |x|
       # ARGV[0] contains the training files ARGV[1] contains 'n'
                next if x == '.' or x == '..' or x.start_with?('.')
                # *** calculate n-gram based on given "n" ***
                words = ng.process_input("#{ARGV[0]}/#{x}")
                p words
                ng.calculate_ngrams("#{words}", "#{ARGV[1]}")
                i+=1
                p i
        end

        hashdump = Marshal.dump(ng.ngram)
        # load the n-gram to hashdump 

        File.open("#{ARGV[0]}#{ARGV[1]}", "w") do |f|
        f.write hashdump        # write hashdump to a file
        end

endT = Time.new
puts "#{startT}"
puts "#{endT}"
                      
