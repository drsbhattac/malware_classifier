#!/usr/bin/ruby
# Author: Sukriti Bhattacharya
# calculate the KLD between a malware(benign) and corresponding language models

class Ngrams
     
     def initialize()
     	@ngram = Hash.new(0) 		# n-gram hash table
     end
     
     def ngram   #accessor method
     	@ngram
     end
     
     
    def calculate_ngrams(line, n) 	# calculate n-gram for each test set file
		
		line = line.downcase.scan(/[a-zA-Z0-9$#]+/)
		n = (n.to_i - 1).to_i		
		num = line.length - n	
			
	    num.times {|i|
	    	key = line[i]
  			n.times{|j|
  			key = key+' '+ line[i+j+1] 					
   			}
  			@ngram[key] += 1
    	}
    	
	end
	
	def calculate_KullbackLiebler(ngP, ngQ, n, m, s)
	
	# calculate Kullback-Liebler Divergence between a file and a language model 

		ng_A = ngP.sort
		#pi = 0
		#qj = 0
                kl = 0
		e = 0.000001
		y = 1 - (e*s)
		ngP.size.times{|i|
                	
			key = ng_A[i][0]
                        p = ngP[key].to_f / n
			#pi += p
			if s != 0 
				if !ngQ.has_key?(key) 
					q = e 
				else
                         		q = y * ngQ[key].to_f / m  
				end
			else
				q = ngQ[key].to_f / m 
			end
			
			#qj += q
                        kl = kl + (p * Math.log2(p/q))
                 }
		#p pi
		#p qj
		return kl
	end
	
  def calculate_N(hash) # calculate total numbers of unigram
   	   ng_A = hash.sort
   	   n = 0
   	   hash.size.times{|i| n += ng_A[i][1]}
   	   return n    	      
   end

def need_smoothing(p, q)
	need = 0
	ng_A = p.sort
	p.size.times{|i|
		key = ng_A[i][0]
		if !q.has_key?(key)
			#p "from sm"
			#p key 
			need += 1
		end
	}
	return need
end
 
   def process_input(inputF) #process input
   		
   		inputfile = File.open("#{inputF}", "rb")
	
		# *** process a hex dump test file ***
	
		line = inputfile.read
		line = line.gsub("\n"," ")
		line = line.gsub("??","00")

		words = line.split(' ').select{|w| w.length <= 4}.join(' ').split
		words = words.unshift("$ $ $ $")
		words = words.push("#")
		inputfile.close()
		return words
   end 	

end



# *** Main() ***

	startT = Time.new
	ng = Ngrams.new
        
        k = Ngrams.new
        k1 = Ngrams.new
        k2 = Ngrams.new
	outputFile1 = File.new("kld3M_MIX.csv", "w")  
	
	
	
	i= 0
	
	ngM = Marshal.load(File.binread("TrMK3"))
	ngB = Marshal.load(File.binread("TrBK3"))

	
	nm = k.calculate_N(ngM)
	nb = k.calculate_N(ngB)


	#outputFile1.write "FILE,  LM2_M, LM2_B"
	
        outputFile1.write "\n"
	Dir.foreach("#{ARGV[0]}") do |y| 			   # for each test file
			
			next if y == '.' or y == '..' or y.start_with?('.')
			
                        wordsY = k.process_input("#{ARGV[0]}/#{y}")
			
			ng.calculate_ngrams("#{wordsY}", "3") # calculate 2-gram
                        
			n = k.calculate_N(ng.ngram)
 		 	sm =k.need_smoothing(ng.ngram, ngM)
			sb =k.need_smoothing(ng.ngram, ngB)	
                        kld_m = k1.calculate_KullbackLiebler(ng.ngram, ngM, n, nm, sm)
                        kld_b = k2.calculate_KullbackLiebler(ng.ngram, ngB, n, nb, sb)
   
			outputFile1.write "#{y},#{kld_m}, #{kld_b}"
			
                        outputFile1.write "\n"

			ng.ngram.clear
                        
                        i+=1
			p i		
			
		end
		
	
	outputFile1.close()
	
	endT = Time.new	
	puts "#{startT}"
	puts "#{endT}"
