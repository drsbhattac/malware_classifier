#!/usr/bin/ruby
# Author: Sukriti Bhattacharya
# calculate the cross-entropy between a malware(benign) and corresponding language models

class Ngrams
     
     def initialize()
     	@ngram = Hash.new(0) 		# n-gram hash table
     end
     
     def ngram   #accessor method
     	@ngram
     end
     
     
    def calculate_ngrams(line, n) 	# calculate n-gram for each test set file
		
		line = line.downcase.scan(/[a-zA-Z0-9#$]+/)
		n = (n.to_i - 1).to_i		
		num = line.length - n	
			
	    num.times {|i|
	    	key = line[i]
  			n.times{|j|
  			key = key+' '+ line[i+j+1] 					
   			}
  			@ngram[key] += 1
    	}
    	
	end
	def calculate_lm2(ng,bi,uni,n)
		ps =0
		ng_A = ng.sort
		ng.size.times{|i|
			key2 = ng_A[i][0]
			key1 = key2.split(' ')[0...-1].join(' ')
			if !bi.has_key?(key2)
				pi = 0.5*(uni[key1].to_f/n.to_f)
			else
				pi = 0.5*(bi[key2].to_f/uni[key1].to_f) + 0.5*(uni[key1].to_f/n.to_f)
			end
			ps = ps + (-1*Math.log(pi))
		}
		return ps
	end		
	
	def calculate_lm3(ng, tri, bi, uni, n)
	
                ps =0
		ng_A = ng.sort
		ng.size.times{|i|
                	
			key3 = ng_A[i][0]
			key2 = key3.split(' ')[0...-1].join(' ')
			key1 = key3.split(' ')[0...-2].join(' ')
			if !tri.has_key?(key3)
				if !bi.has_key?(key2)
					pi = 0.33*(uni[key1].to_f/n.to_f)
				else
					pi = 0.33*(bi[key2].to_f/uni[key1].to_f) + 0.33*(uni[key1].to_f/n.to_f)
				end
			else
				pi = 0.33*(tri[key3].to_f/bi[key2].to_f) + 0.33*(bi[key2].to_f/uni[key1].to_f) + 0.33*(uni[key1].to_f/n.to_f)
			end

			ps = ps + (-1 * Math.log(pi)) # x' = -log(x), x*y = x'+y' 
			
                 }
		return ps 
	end
	
  def calculate_N(hash) # calculate total numbers of unigram
   	   ng_A = hash.sort
   	   n = 0
   	   hash.size.times{|i| n += ng_A[i][1]}
   	   return n    	      
   end

 
   def process_input(inputF) #process input
   		
   		inputfile = File.open("#{inputF}", "rb")
	
		# *** process a hex dump test file ***
	
		line = inputfile.read
		line = line.gsub("\n"," ")
		line = line.gsub("??","00")

		words = line.split(' ').select{|w| w.length <= 4}.join(' ').split
		words = words.unshift("$ $ $ $")
		words = words.push("#")
		inputfile.close()
		return words
   end 	

end



# *** Main() ***

	startT = Time.new
	ng = Ngrams.new
        
        k = Ngrams.new
        k1 = Ngrams.new
        k2 = Ngrams.new
	outputFile = File.new("lm3M_P.csv", "w")  
	
	
	
	i= 0
	
	ng3M = Marshal.load(File.binread("TrP13"))
	ng3B = Marshal.load(File.binread("TrB13"))
	ng2M = Marshal.load(File.binread("TrP12"))
	ng2B = Marshal.load(File.binread("TrB12"))
	ng1M = Marshal.load(File.binread("TrP11"))
	ng1B = Marshal.load(File.binread("TrB11"))

	
	nm = k.calculate_N(ng1M)
	nb = k.calculate_N(ng1B)


	
	Dir.foreach("#{ARGV[0]}") do |y| 			   # for each test file
			
			next if y == '.' or y == '..' or y.start_with?('.')
			
                        wordsY = k.process_input("#{ARGV[0]}/#{y}")
			
			ng.calculate_ngrams("#{wordsY}", "3") # calculate 2-gram
                        
                        lm_m = k1.calculate_lm3(ng.ngram, ng3M, ng2M, ng1M, nm)
                        lm_b = k2.calculate_lm3(ng.ngram, ng3B, ng2B, ng1B, nb)
			
			n1 = k.calculate_N(ng.ngram)
			lm_m = lm_m/n1
			lm_b = lm_b/n1
			outputFile.write "#{y},#{lm_m},#{lm_b}"
			
                        outputFile.write "\n"

			ng.ngram.clear
                        
                        i+=1
			p i		
			
		end
		
	
	outputFile.close()
	
	endT = Time.new	
	puts "#{startT}"
	puts "#{endT}"
