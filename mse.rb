#!/usr/bin/ruby
# Author: Sukriti Bhattacharya
# calculate the mean squared error(MSE) between a malware(benign) and corresponding language models

class Ngrams
     
     def initialize()
     	@ngram = Hash.new(0) 		# n-gram hash table
     end
     
     def ngram   #accessor method
     	@ngram
     end
     
     
    def calculate_ngrams(line, n) 	# calculate n-gram for each test set file
		
		line = line.downcase.scan(/[a-zA-Z0-9#$]+/)
		n = (n.to_i - 1).to_i		
		num = line.length - n	
			
	    num.times {|i|
	    	key = line[i]
  			n.times{|j|
  			key = key+' '+ line[i+j+1] 					
   			}
  			@ngram[key] += 1
    	}
    	
     end


	def calculate_mse(ng2,ng1,bi,uni)
		mse =0
		ng_A = ng2.sort
		ng2.size.times{|i|
			key2 = ng_A[i][0]
			key1 = key2.split(' ')[0...-1].join(' ')
			x1 = ng2[key2].to_f/ng1[key1].to_f
			if bi[key2] != 0
				x2 = bi[key2].to_f / uni[key1].to_f
			else
				x2 =0
			end
			se_i = 	(x2-x1)*(x2-x1)
			mse = mse + se_i
	}
		return mse 
	end		
	

 
   def process_input(inputF) #process input
   		
   		inputfile = File.open("#{inputF}", "rb")
	
		# *** process a hex dump test file ***
	
		line = inputfile.read
		line = line.gsub("\n"," ")
		line = line.gsub("??","00")

		words = line.split(' ').select{|w| w.length <= 4}.join(' ').split
		words = words.unshift("$ $ $ $")
		words = words.push("#")
		inputfile.close()
		return words
   end 	

end



# *** Main() ***

	startT = Time.new
	ng2 = Ngrams.new
        ng1 = Ngrams.new

        k = Ngrams.new
        k1 = Ngrams.new
        k2 = Ngrams.new
	outputFile = File.new("mse3M_P.csv", "w")  
	
	
	
	i= 0
	
	ng2M = Marshal.load(File.binread("TrP13"))
	ng2B = Marshal.load(File.binread("TrB13"))
	ng1M = Marshal.load(File.binread("TrP12"))
	ng1B = Marshal.load(File.binread("TrB12"))

	

	
	Dir.foreach("#{ARGV[0]}") do |y| 			   # for each test file
			
			next if y == '.' or y == '..' or y.start_with?('.')
			
                        wordsY = k.process_input("#{ARGV[0]}/#{y}")
			
			ng2.calculate_ngrams("#{wordsY}", "3") # calculate 2-gram
                        ng1.calculate_ngrams("#{wordsY}", "2")
			
                        mse_b = k2.calculate_mse(ng2.ngram, ng1.ngram, ng2B, ng1B)
                        mse_m = k1.calculate_mse(ng2.ngram, ng1.ngram, ng2M, ng1M)
			outputFile.write "#{y},#{mse_m},#{mse_b}"
			
                        outputFile.write "\n"

			ng2.ngram.clear
			ng1.ngram.clear
                        
                        i+=1
			p i		
			
		end
		
	
	outputFile.close()
	
	endT = Time.new	
	puts "#{startT}"
	puts "#{endT}"
